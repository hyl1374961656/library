//瀑布流
        cnpm i masonry-layout -S
        cnpm i imagesloaded -S
        cnpm i react-infinite-scroller -S
        
        import React from 'react'
        import Masonry from 'masonry-layout'
        import InfiniteScroll from 'react-infinite-scroller'
        import imagesLoaded from 'imagesloaded'
        import axios from 'axios'
        import qs from 'qs'
        import cs from 'classnames'
        import './App.css'

        // columnWidth: 200,
        // itemSelector: '.grid-item' // 要布局的网格元素
        // gutter: 10 // 网格间水平方向边距，垂直方向边距使用css的margin-bottom设置
        // percentPosition: true // 使用columnWidth对应元素的百分比尺寸
        // stamp:'.grid-stamp' // 网格中的固定元素，不会因重新布局改变位置，移动元素填充到固定元素下方
        // fitWidth: true // 设置网格容器宽度等于网格宽度，这样配合css的auto margin实现居中显示
        // originLeft: true // 默认true网格左对齐，设为false变为右对齐
        // originTop: true // 默认true网格对齐顶部，设为false对齐底部
        // containerStyle: { position: 'relative' } // 设置容器样式
        // transitionDuration: '0.8s' // 改变位置或变为显示后，重布局变换的持续时间，时间格式为css的时间格式
        // stagger: '0.03s' // 重布局时网格并不是一起变换的，排在后面的网格比前一个延迟开始，该项设置延迟时间  
        // resize:  false // 改变窗口大小将不会影响布局
        // initLayout: true // 初始化布局，设未true可手动初试化布局

        const arr = [
          'https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3008142408,2229729459&fm=26&gp=0.jpg',
          'https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3437217665,1564280326&fm=26&gp=0.jpg',
          'https://dss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2458227883,4095122505&fm=26&gp=0.jpg',
          'https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1761250919,1896060533&fm=26&gp=0.jpg',
          'https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2852083094,372235004&fm=26&gp=0.jpg',
          'https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2944705163,3932100810&fm=26&gp=0.jpg',
          'https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3104686528,572431609&fm=26&gp=0.jpg',
          'https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1576288847&di=27669bdca3862cfd87204e465ae20ccd&src=http://i0.hdslb.com/bfs/article/15adf7744c813f5fba147c7dd019ba6000596946.jpg',
          'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576298935421&di=7afeda919c257ac23eb6cda27c3bfa94&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F6e7a964fbb56909216a257a67f84ef6e694dcef0.jpg',
          'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576298935420&di=1027ff51e6a6e70ea9375e74c26d8e28&imgtype=0&src=http%3A%2F%2Fimgup04.qu99.com%2Fqu99%2F2019-04%2F06%2F10%2F15545193962159_0.jpg',
          'https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3008142408,2229729459&fm=26&gp=0.jpg',
          'https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3437217665,1564280326&fm=26&gp=0.jpg',
          'https://dss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2458227883,4095122505&fm=26&gp=0.jpg',
          'https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1761250919,1896060533&fm=26&gp=0.jpg',
          'https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2852083094,372235004&fm=26&gp=0.jpg',
          'https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2944705163,3932100810&fm=26&gp=0.jpg',
          'https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3104686528,572431609&fm=26&gp=0.jpg',
          'https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1576288847&di=27669bdca3862cfd87204e465ae20ccd&src=http://i0.hdslb.com/bfs/article/15adf7744c813f5fba147c7dd019ba6000596946.jpg',
          'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576298935421&di=7afeda919c257ac23eb6cda27c3bfa94&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F6e7a964fbb56909216a257a67f84ef6e694dcef0.jpg',
          'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576298935420&di=1027ff51e6a6e70ea9375e74c26d8e28&imgtype=0&src=http%3A%2F%2Fimgup04.qu99.com%2Fqu99%2F2019-04%2F06%2F10%2F15545193962159_0.jpg'
        ]

        export default class extends React.PureComponent {
          constructor (props) {
            super(props)

            this.state = {
              hasMore: true, // 是否开启下拉加载
              data: [], // 接受我每次的数据
              count: 0,
            }
            // 拿第一次的数据
            this.loadMoreData()
          }

          advanceWidth = () => {
            // new Masonry(节点, 配置)
            new Masonry(document.querySelector('.pages-hoc'), {
              itemSelector: '.d', // 要布局的网格元素
              columnWidth: document.querySelector('.d'),  // 获取节点 可以自动计算每列的宽度
              fitWidth: true, // 设置网格容器宽度等于网格宽度
              gutter: 20,//元素左右两边的距离
            })
          }

          imageLoad = () => {

            const elload = imagesLoaded('.pages-hoc')
            elload.on('always',() => {
              this.advanceWidth()
              console.log('图片已全部加载，或被确认加载失败');
            })
            elload.on('done',() => {
              console.log('图片全部加载成功');
            })
            elload.on('fail',() => {
              this.advanceWidth()
              console.log('图片已全部加载，且至少一个图片加载失败');
            })
            elload.on('progress',( instance, image ) => {
              console.log('每张图片加载完');
              var result = image.isLoaded ? 'loaded' : 'broken';
              console.log( '加载结果 ' + result + ' 图片地址 ' + image.img.src );
            })
          }

          // 加载更多数据
          loadMoreData = (page = 1) => {
            // page 当前滚动到了第几页
            const { data, count } = this.state
            // 超过200条数据 不继续监听下拉事件
            if (count && data.length >= count) {
              return false
            }

            // page 是当前请求第几页数据
            // limit 每页我需要返回的数据条数
            axios.post('https://blogs.zdldove.top/Home/Apis/listWithPage', qs.stringify({ page, limit: 20 }))
              .then(res => {
                res.data.result.list.map((v,i) => {
                  v.img = arr[i]
                })
                console.log(res.data.result.list)
                this.setState({
                  data: [...data, ...res.data.result.list],
                  count: res.count,
                },() => {
                  this.imageLoad()
                })
              })
              .catch(err => console.log(err))
          }

          render () {
            const { hasMore } = this.state

            return (
              <div className="box">
                <InfiniteScroll
                  initialLoad={false} // 不让它进入直接加载
                  pageStart={1} // 设置初始化请求的页数
                  loadMore={this.loadMoreData}  // 监听的ajax请求
                  hasMore={hasMore} // 是否继续监听滚动事件 true 监听 | false 不再监听
                  useWindow={false} // 不监听 window 滚动条
                >
                  <div className="pages-hoc">
                    {
                      this.state.data.map((dt, key) => (
                        <div 
                          key={key} 
                          className={cs('d', {d1: key%2 === 0, d2: key%2 !== 0})}
                        >
                          <img src={dt.img}/>
                          <p>{dt.title}</p>
                        </div>
                      ))
                    }
                  </div>
                </InfiniteScroll>
              </div>
            )
          }
        }
