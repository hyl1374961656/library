//安装项目
        1. npx create-react-app 你的项目名 或者 create-react-app 你的项目名
        2. cnpm i
        3. git add .
        4. git commit -m 'xm'
        5. npm run eject
        6. cnpm i axios qs classnames react-router-dom redux-promise redux-thunk -S
        7. cnpm i redux react-redux less less-loader shortid redux-persist -S
        8. cnpm i react-router-config -S (需要使用新路由的同学装，不使用的跳过)
        9. cnpm i @babel/plugin-proposal-decorators --save-dev
        10. cnpm i babel-plugin-syntax-dynamic-import -D
        11. cnpm i antd-mobile --save (移动端项目装)
        12. cnpm i antd -S (PC端项目装)
        13. cnpm i react-lazyload -S
        14. cnpm i react-loadable -S
        15. cnpm i http-proxy-middleware -D
        16. 替换 package.json文件
        "babel": {
          "presets": [
            "react-app"
          ],
          "plugins": [
            [
              "@babel/plugin-proposal-decorators",
              {
                "legacy": true
              }
            ],
            "syntax-dynamic-import"
          ]
        }



//下拉加载
        npm install react-infinite-scroller --save
        import InfiniteScroll from 'react-infinite-scroller';

        export default class extends React.Component {

          constructor (props) {
            super(props)
            this.state = {
              hasMore: true,
              data: [],
              count: 0,
            }
            this.loadFunc()
          }

          // 加载更多数据
          loadFunc = page => {
            // page 当前滚动到了第几页
            const { data, count } = this.state
            // 超过200条数据 不继续监听下拉事件
            if (count && data.length >= count) {
              return false
            }
            // page 是当前请求第几页数据
            // limit 每页我需要返回的数据条数
            request('/Home/Apis/listWithPage', { page, limit: 10 })
              .then(res => {
                this.setState({
                  data: [...data, ...res.list],
                  count: res.count,
                })
              })
              .catch(err => console.log(err))
          }

          render () {
            const { hasMore, data } = this.state
            return (
              <div  className="wrap_box">
                <InfiniteScroll
                    initialLoad={false}//	组件是否应加载第一组项目
                    pageStart={1}//要加载的第一页的编号，默认值为0，第一页为1
                    loadMore={this.loadFunc}
                    hasMore={hasMore}//是否还有更多项目要加载。如果事件监听器被删除false
                    loader={<div className="loader" key={0}>Loading ...</div>}
                    useWindow={false}//将滚动侦听器添加到窗口，或者添加组件的parentNode
                >
                    {
                        data.map((v,k) => {
                          return(
                          <p key={k}>{v.title}</p>
                          )
                        })
                    }

                </InfiniteScroll>
              </div>
            )
          }
        }


//图片懒加载
        cnpm i react-lazyload -S
        import LazyLoad from 'react-lazyload';

        data.map((v,i) => {
                return (
                    <LazyLoad 
                        height={200} 
                        scrollContainer=".wrap_box"//滚动添加到容器上
                    >
                       <img src={v.photos[0].url} style={{width:'100%',height:200}}/>
                    </LazyLoad>
                )
        })


//路由懒加载
        cnpm i react-loadable -S
        //package  内容配置
        "babel": {
        "presets": [
            "react-app"
          ],
          "plugins": [
            [
              "@babel/plugin-syntax-dynamic-import",
              {
                "legacy": true
              }
            ]
          ]
        }

        //index.js入口文件
        import loadable from './pages/abc'

        const Abc = loadable(() => import('./pages/index'))//将需要加载的页面传过去
        const App = loadable(() => import('./App'))

        //封装的懒加载组件
        import React from 'react'
        import Loadable from 'react-loadable';

        const LoadinC = () => <div>loading</div>

        export default (loader, loading = LoadinC) => {
            return Loadable({
                loader: loader,//需要加载的页面
                loading
            })
        }


// less配置
         cnpm i less less-loader -S
         //webpack.config.js   48行 替换成 const cssRegex = /\.(css|less)$/;
         //     90行
           {
              loader: require.resolve('css-loader'),
              options: cssOptions,
           },
         // 放在上面内容的下边
          {
            loader: require.resolve('less-loader'), // compiles Less to CSS
            options: {
              modifyVars: {},
              javascriptEnabled: true,
            },
          },


//配置多个代理
          文件名setupProxy.js  放在src文件夹下
          //setupProxy.js   里的内容
          cnpm i http-proxy-middleware -D

          const proxy = require('http-proxy-middleware')
          module.exports = function(app) {
              app.use(
                  proxy('/api', {
                      target: 'https://blogs.zdldove.top',
                      changeOrigin: true,
                      pathRewrite: {
                          '^/api': ''
                      }
                  })
              )
              app.use(
                  proxy('/app', {
                      target: 'http://www.suming9266.top',
                      changeOrigin: true,
                      pathRewrite: {
                          '^/app': ''
                      }
                  })
              )
          }
 
 
//axios拦截器
        import axios from 'axios'

        let cancelToken = axios.CancelToken

        const cancel = []

        const removePending = config => {
            for(let p in cancel){
              if (cancel[p].u === config.url) {
                cancel[p].f()
              }
            }
        }

        // 请求拦截器 发送一个请求之前
        axios.interceptors.request.use(config => {
            //在一个ajax发送前执行一下取消操作
            removePending(config)
            config.cancelToken = new cancelToken(c => {
              cancel.push({ 
                f: c,
                u: config.url,
              })
            })
            return config
          }, error => {
            return Promise.reject(error)
          })

          //添加响应拦截器
          axios.interceptors.response.use(response => {
            return response
          }, error => {})
 
 
//axios封装
        export function request (url, payload = {}) {
          return new Promise((resolve, reject) => {
            axios({
              method: 'post',
              url,
              data: payload
            })
              .then(response => {
                const data = response.data
                if (data.code === 200) {
                  resolve(data.data)
                } else {
                  reject(data) 
                }
              })
              .catch(err => {
                reject(err)
              })
          })
        }

        export function get (url, payload = {}) {
          return new Promise((resolve, reject) => {
            axios({
              method: 'get',
              url,
              params: payload
            })
              .then(response => {
                const data = response.data
                if (data.code === 200) {
                  resolve(data.data)
                } else {
                  // reject(data) 
                }
              })
              .catch(err => {
                // reject(err)
              })
          })
        }
 
 
//数据持久化    redux数据监听
        cnpm i redux react-redux redux-promise redux-thunk redux-persist -S
        cnpm i @babel/plugin-proposal-decorators --save-dev
        cnpm i babel-plugin-syntax-dynamic-import -D
        //store页面
        import { createStore, applyMiddleware, compose } from 'redux'
        import promise from 'redux-promise'
        import thunk from 'redux-thunk'
        import { persistReducer } from 'redux-persist'
        import storage from 'redux-persist/lib/storage'
        import autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2'

        const initState = {
          // 用户名
          username: '',
          // 账号密码
          password: '',
          // 是否选中记住密码
          password_save: false,
          // 主页表格数据
          dataTable: [],
        }

        export default function redecer (state = initState, action) {
          switch (action.type) {
            // 登录
            case 'LOGIN':
              return { ...state, name: action.payload.token }

            case 'SAVE_PASSWORD':
              return { ...state, ...action.payload }

            case 'TABLE_DATA':
              return { ...state, dataTable: action.payload }

            default:
              return state
          }
        }

        // 我要对哪些state做数据持久化
        const rootPersistConfig = {
          key: 'root',
          storage: storage,
          stateReconciler: autoMergeLevel2,
          // 白名单
          whitelist: ['username', 'password', 'password_save'],
        }

        // 单独为 某个 reduce 做数据持久化
        const myPersistReducer = persistReducer(
          rootPersistConfig, 
          redecer,
        )

        const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose

        const store = createStore(
          myPersistReducer,
          composeEnhancers(applyMiddleware(promise, thunk))
        )

        export { store }

        //index.js入口文件
        import { Provider } from 'react-redux'
        import { persistStore } from 'redux-persist'
        import { PersistGate } from 'redux-persist/lib/integration/react'
        import { store } from './store'
        
        <Provider store={store}>
            <PersistGate loading={null} persistor={persistStore(store)}>
            </PersistGate>
        </Provider>

        //需要使用redux数据的页面
        import { connect } from 'react-redux'
        export default @connect(state => {
          return {
            dataTable: state.dataTable,
          }
        }, {
          // 获取表格数据
          getData: () => {
            return {
              type: 'TABLE_DATA',
              payload: get('/api/banner/list')
            }
          }
        })

        //package.json内容替换
        "babel": {
          "presets": [
            "react-app"
          ],
          "plugins": [
            [
              "@babel/plugin-proposal-decorators",
              {
                "legacy": true
              }
            ],
            "syntax-dynamic-import"
          ]
        }

//路由拦截里面添加参数
        // config.data = { ...config.data.data, key: '5d2878270550ac239657ffa54edd96ff' }
        // config.headers = { ...config.headers, key: '5d2878270550ac239657ffa54edd96ff' }

        headers: {
           key: '5d2878270550ac239657ffa54edd96ff',
        }


//路径配置
        //webpack.config.js文件下
        //alias里面
        //320行
        '@': path.resolve(__dirname, '../src'),
        '@@': path.resolve(__dirname, '../src/components')




