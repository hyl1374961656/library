//assets文件存放图片

//components存放公用组件

//constants文件夹下
    //actionTypes.js文件   vuex修改state方法
      // 登录 mutations
      export const SIGN_UP = 'SIGN_UP'
      // 登录 action
      export const ON_SIGN_UP = 'ON_SIGN_UP'

//layouts文件夹最外层的组件

//pages页面
      <template>
          <div class="signup-wrap-box">
              <div class="signup-form-box">
                  <el-form ref="form" :model="form" label-width="80px">
                      <el-form-item label="用户名">
                          <el-input v-model="form.username"></el-input>
                      </el-form-item>
                      <el-form-item label="密码">
                          <el-input v-model="form.password"></el-input>
                      </el-form-item>
                      <el-form-item>
                          <el-button type="primary" @click="onSubmit">立即登录</el-button>
                          <el-button @click="onRegister">注册</el-button>
                      </el-form-item>
                  </el-form>
              </div>
          </div>
      </template>

      <script>
          import './style.less'
          import { ON_SIGN_UP } from '@/constants/actionTypes'
          export default {
              data () {
                  return {
                      form: {
                          username: '',
                          password: '',
                      }
                  }
              },
              methods: {
                  onSubmit() {
                      this.$store.dispatch(ON_SIGN_UP,this.form)
                  },
                  onRegister() {
                      this.$router.push('/register')
                  }
              }
          }
      </script>


//routers文件夹
      //components.js
      const Signup = () => import(/* webpackChunkName: "Home" */ '@/pages/signup')
      const Register = () => import(/* webpackChunkName: "Home" */ '@/pages/register')
      const List = () => import(/* webpackChunkName: "Home" */ '@/pages/list')

      export {
        Signup,
        Register,
        List,
      }

      //index.js文件
      import Vue from 'vue'
      import VueRouter from 'vue-router'
      import { Signup, Register, List } from './components'

      Vue.use(VueRouter)

      const routes = [
        {
          path: '/',
          component: Signup,
          children: [
            {
              path: '/list',
              component: List
            }
          ]
        },
        {
          path: '/register',
          component: Register
        }
      ]

      const router = new VueRouter({
        mode: 'history',
        routes,
      })

      // router.beforeEach((to, from, next) => {
      //   if (!localStorage.getItem('token') && !to.path.includes('/login')) {
      //     next('/login')

      //   } else {
      //     next()
      //   }
      // })

      export default router


//services文件夹
      //api.js文件
      export default {
          //登录接口
          signup: 'api/shop/dologin',
      }
      
      //index.js文件
      import { post } from '@/utils/request'
      import api from './api'

      export const signUp = options => post(api.signup,options)

//store文件夹
      index.js文件
      import Vue from 'vue'
      import Vuex from 'vuex'
      import { SIGN_UP, ON_SIGN_UP } from '@/constants/actionTypes'
      import { signUp } from '@/services'

      Vue.use(Vuex)

      const store = new Vuex.Store({
        state: {
          username: '',
          token: '',
        },

        // 只能在变更里修改 state
        // 必须是同步的
        // 触发变更 store.commit(变更)
        mutations: {
          [SIGN_UP] (state, action) {
            state.token = action.data.data.token
            state.username = action.data.data.username
          }
        },

        // 触发 actions 是 store.dispath
        actions: {
          [ON_SIGN_UP] ({ commit }, obj ) {
            signUp(obj)
              .then(res => commit(SIGN_UP, res)
              // {
              //   if(res.data.code === 200) {
              //     commit(SIGN_UP, res)
              //     console.log(this)
              //   }
              // })
              )
          }
        }
      })

      export default store

//utils文件夹
      //element.js
      import Vue from 'vue'
      import {
        Button,
        Table,
        TableColumn,
        Input,
        FormItem,
        Form,
      } from 'element-ui'

      Vue.use(Button)
      Vue.use(FormItem)
      Vue.use(Table)
      Vue.use(TableColumn)
      Vue.use(Input)
      Vue.use(Form)

      //request.js文件
      import axios from 'axios'
      import qs from 'qs'

      let cancelToken = axios.CancelToken

      const cancel = []

      const removePending = config => {
          for(let p in cancel){
              if (cancel[p].u === config.url) {
              cancel[p].f()
              }
          }
      }

      // 请求拦截器 发送一个请求之前
      axios.interceptors.request.use(config => {
          //在一个ajax发送前执行一下取消操作
          removePending(config)
          config.cancelToken = new cancelToken(c => {
              cancel.push({ 
                  f: c,
                  u: config.url,
              })
          })
              return config
          }, error => {
              return Promise.reject(error)
      })

      //添加响应拦截器
      axios.interceptors.response.use(response => {
          return response
      }, error => {console.log(error)})

      export function post (url, payload = {}) {
          payload=qs.stringify(payload)
          return new Promise((resolve, reject) => {
          axios({
              method: 'post',
              baseURL: '/api',
              url,
              data: payload
          })
              .then(response => {
                  console.log(response.data)
                  resolve(response)
              })
              .catch(err => {
                  reject(err)
              })
          })
      }

      export function get (url, payload = {}) {
          return new Promise((resolve, reject) => {
          axios({
              method: 'get',
              baseURL: '/api',
              url,
              params: payload
          })
              .then(response => {
                  resolve(response)
              })
              .catch(err => {
                  reject(err)
              })
          })
      }

//App.vue文件
      <template>
        <div id="app">
          <!-- 路由出口 -->
          <!-- 路由匹配到的组件将渲染在这里 -->
          <router-view></router-view>
        </div>
      </template>

//main.js文件
      import Vue from 'vue'
      import App from './App'
      import router from './routers'
      import store from '@/store'
      import '@/utils/element'

      new Vue({
        router,
        store,
        render: h => h(App),
      }).$mount('#app')

//最外层文件夹
      //babel.config.js
      module.exports = {
        presets: [
          '@vue/cli-plugin-babel/preset',
        ],
        "plugins": [
          [
            "component", 
            {
              "libraryName": "element-ui",
              styleLibraryName: "theme-chalk",
            },
            "@babel/plugin-syntax-dynamic-import"
          ],
        ]
      }

      //package.json文件    允许console.log
      "rules": {
        "no-console": "off"
      },

      //vue.config.js文件
      const path = require('path');

      module.exports = {
        configureWebpack: {
          resolve: {
            alias: {
              '@': path.join(__dirname, 'src/'),
              '@@': path.join(__dirname, 'src/components/'),
            },
          },
          devServer: {
            proxy: {
                '/api': {
                    target: 'http://134.175.115.202',
                    changeOrigin: true,
                    ws: true,
                    pathRewrite: {
                      '^/api': ''
                    }
                }
            }
          }
        },
      }











